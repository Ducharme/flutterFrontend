import 'packagdarte:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:h3_flutter/h3_flutter.dart' as h3_flutter;
import 'package:h3_dart/h3_dart.dart' as h3_dart;

void main() {
  runApp(MyApp());
}

TextStyle getDefaultTextStyle() {
  return const TextStyle(
    fontSize: 12,
    backgroundColor: Colors.black,
    color: Colors.white,
  );
}

Container buildTextWidget(String word) {
  return Container(
      alignment: Alignment.center,
      child: Text(
          word,
          textAlign: TextAlign.center,
          style: getDefaultTextStyle()
      )
  );
}

Marker buildMarker(LatLng coordinates, String word) {
  return Marker(
      point: coordinates,
      width: 100,
      height: 12,
      builder: (context) => buildTextWidget(word)
  );
}

var isMapControllerReady = false;

final h3 = const h3_flutter.H3Factory().load();

List<Polygon> buildPolygons() {
  if (!isMapControllerReady) return [];

  final bounds = mapController.bounds!;
  final zoom = mapController.zoom.toInt();
  final resolution = zoom > 2 ? zoom - 2 : (zoom > 1 ? zoom -1 : zoom);

  final neGc = h3_dart.GeoCoord(lat: bounds.northEast!.latitude, lon: bounds.northEast!.longitude);
  final swGc = h3_dart.GeoCoord(lat: bounds.southWest!.latitude, lon: bounds.southWest!.longitude);
  final nwGc = h3_dart.GeoCoord(lat: bounds.northWest!.latitude, lon: bounds.northWest!.longitude);
  final seGc = h3_dart.GeoCoord(lat: bounds.southEast!.latitude, lon: bounds.southEast!.longitude);

  List<h3_dart.GeoCoord> coordinates = [neGc, nwGc, swGc, seGc];
  final hexagons = h3.polyfill(coordinates: coordinates, resolution: resolution);
  print ("hexagons: " + hexagons.length.toString() + " zoom: " + zoom.toString());
  return hexagons.map((h) => Polygon(points: getLatLngFromGeoCoord(h), color: Colors.blue.withOpacity(0.1),
      borderStrokeWidth: 1, borderColor: Colors.blue.withOpacity(0.3), isFilled: true)).toList();
}

List<LatLng> getLatLngFromGeoCoord(BigInt h) {
  List<h3_dart.GeoCoord> geoCoords = h3.h3ToGeoBoundary(h);
  List<LatLng> latLngs = geoCoords.map((geoCoord) => LatLng(geoCoord.lat, geoCoord.lon)).toList();
  return latLngs;
}

final mapController = MapController();

class MyApp extends StatefulWidget {
  @override
  State<StatefulWidget> createState() {
    return _MyAppState();
  }
}

class _MyAppState extends State<MyApp> {
  List<Polygon> polygons = [];

  @override
  void initState() {
    super.initState();
    polygons = buildPolygons();
    /*mapController.onMapReady.then((_) {
      setState(() {
        isMapControllerReady = true;
      });
    });*/
  }

  void _updatePolygons() {
    setState(() {
      polygons = buildPolygons();
    });
  }

  void _handleDragEnd(DragEndDetails details) {
    _updatePolygons();
  }

  //@override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: FlutterMap(
          mapController: mapController,
          options: MapOptions(
            minZoom: 2,
            maxZoom: 18,
            zoom: 3.2,
            center: LatLng(51.509364, -0.128928), //LatLng(51.5090214, -0.1982948),
            interactiveFlags: InteractiveFlag.all & ~InteractiveFlag.rotate,
            onPositionChanged: (MapPosition position, bool hasGesture) {
              var pnw = "${position.bounds?.northWest?.latitude?.toString()},${position?.bounds?.northWest?.longitude?.toString()}";
              var pse = "${position.bounds?.southEast?.latitude?.toString()},${position?.bounds?.southEast?.longitude?.toString()}";
              print ("onPositionChanged position(nw,se):[$pnw],[$pse]");
              _updatePolygons();
            },
            onMapReady: () {
              var bnw = "${mapController.bounds?.northWest?.latitude?.toString()},${mapController?.bounds?.northWest?.longitude?.toString()}";
              var bse = "${mapController.bounds?.southEast?.latitude?.toString()},${mapController?.bounds?.southEast?.longitude?.toString()}";
              print ("onMapReady bounds(nw,se):[$bnw],[$bse]");
              isMapControllerReady = true;
              _updatePolygons();
            },
          ),
          nonRotatedChildren: [
            // This does NOT fulfill Mapbox's requirements for attribution
            // See https://docs.mapbox.com/help/getting-started/attribution/
            AttributionWidget.defaultWidget(
              source: 'Mapbox Â© OpenStreetMap',
              onSourceTapped: () async {
                if (!await launchUrl(Uri.parse("https://docs.mapbox.com/help/getting-started/attribution/"))) {
                  if (kDebugMode) {
                    print('Could not launch URL');
                  }
                }
              },
            )
          ],
          children: [
            TileLayer(
              urlTemplate: "https://api.mapbox.com/styles/v1/{userId}/{mapStyleId}/tiles/256/{z}/{x}/{y}@2x?access_token={accessToken}",
              additionalOptions: const {
                "userId": "fleet823",
                "mapStyleId": 'clflhhq5a009k01p4w9m56gha',
                "accessToken": 'pk.eyJ1IjoiZmxlZXQ4MjMiLCJhIjoiY2tyNTM0cTlyMzF0czJvcGE1eXo2MHlxZCJ9.Uaq6EkRr4ZhHTsOuz-ZXIA',
              },
              userAgentPackageName: 'com.lafleet.app'
            ),
            // Examples from https://dev.to/raphaeldelio/getting-started-with-flutter-map-1p30
            // Check later API desc from https://docs.stadiamaps.com/native-multiplatform/flutter-map/
            PolygonLayer(
              polygonCulling: false,
              polygons: polygons
            ),
          ], // children
        ),
        /*floatingActionButton: FloatingActionButton(
          onPressed: _updatePolygons,
          child: Icon(Icons.refresh),
        ),*/
      ),
    );
  }

  @override
  State<StatefulWidget> createState() {
    // TODO: implement createState
    throw UnimplementedError();
  }

  // https://docs.flutter.dev/ui/interactive
  //https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html
  //https://docs.flutter.dev/ui/interactive#managing-state
  /*@override
  State<StatefulWidget> createState() {
    LatLngBounds? bounds = mapController.bounds;
    return bounds;
  }*/
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Invoke "debug painting" (press "p" in the console, choose the
          // "Toggle Debug Paint" action from the Flutter Inspector in Android
          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
          // to see the wireframe for each widget.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
